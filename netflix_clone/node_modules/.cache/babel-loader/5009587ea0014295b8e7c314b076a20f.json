{"ast":null,"code":"import { __assign } from 'tslib';\nimport { invariant } from 'hey-listen';\nimport { PanSession } from '../PanSession.mjs';\nimport { getGlobalLock } from './utils/lock.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/use-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, rebaseAxisConstraints, calcViewportConstraints, calcOrigin, defaultElastic } from './utils/constraints.mjs';\nimport { AnimationType } from '../../render/utils/types.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { startAnimation } from '../../animation/utils/transitions.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/use-dom-event.mjs';\nimport { mix } from 'popmotion';\nvar elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: AnyPointerEvent\n\nvar VisualElementDragControls =\n/** @class */\nfunction () {\n  function VisualElementDragControls(visualElement) {\n    // This is a reference to the global drag gesture lock, ensuring only one component\n    // can \"capture\" the drag of one or both axes.\n    // TODO: Look into moving this into pansession?\n    this.openGlobalLock = null;\n    this.isDragging = false;\n    this.currentDirection = null;\n    this.originPoint = {\n      x: 0,\n      y: 0\n    };\n    /**\n     * The permitted boundaries of travel, in pixels.\n     */\n\n    this.constraints = false;\n    this.hasMutatedConstraints = false;\n    /**\n     * The per-axis resolved elastic values.\n     */\n\n    this.elastic = createBox();\n    this.visualElement = visualElement;\n  }\n\n  VisualElementDragControls.prototype.start = function (originEvent, _a) {\n    var _this = this;\n\n    var _b = _a === void 0 ? {} : _a,\n        _c = _b.snapToCursor,\n        snapToCursor = _c === void 0 ? false : _c;\n    /**\n     * Don't start dragging if this component is exiting\n     */\n\n\n    if (this.visualElement.isPresent === false) return;\n\n    var onSessionStart = function (event) {\n      // Stop any animations on both axis values immediately. This allows the user to throw and catch\n      // the component.\n      _this.stopAnimation();\n\n      if (snapToCursor) {\n        _this.snapToCursor(extractEventInfo(event, \"page\").point);\n      }\n    };\n\n    var onStart = function (event, info) {\n      var _a; // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n\n\n      var _b = _this.getProps(),\n          drag = _b.drag,\n          dragPropagation = _b.dragPropagation,\n          onDragStart = _b.onDragStart;\n\n      if (drag && !dragPropagation) {\n        if (_this.openGlobalLock) _this.openGlobalLock();\n        _this.openGlobalLock = getGlobalLock(drag); // If we don 't have the lock, don't start dragging\n\n        if (!_this.openGlobalLock) return;\n      }\n\n      _this.isDragging = true;\n      _this.currentDirection = null;\n\n      _this.resolveConstraints();\n\n      if (_this.visualElement.projection) {\n        _this.visualElement.projection.isAnimationBlocked = true;\n        _this.visualElement.projection.target = undefined;\n      }\n      /**\n       * Record gesture origin\n       */\n\n\n      eachAxis(function (axis) {\n        _this.originPoint[axis] = _this.getAxisMotionValue(axis).get();\n      }); // Fire onDragStart event\n\n      onDragStart === null || onDragStart === void 0 ? void 0 : onDragStart(event, info);\n      (_a = _this.visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Drag, true);\n    };\n\n    var onMove = function (event, info) {\n      // latestPointerEvent = event\n      var _a = _this.getProps(),\n          dragPropagation = _a.dragPropagation,\n          dragDirectionLock = _a.dragDirectionLock,\n          onDirectionLock = _a.onDirectionLock,\n          onDrag = _a.onDrag; // If we didn't successfully receive the gesture lock, early return.\n\n\n      if (!dragPropagation && !_this.openGlobalLock) return;\n      var offset = info.offset; // Attempt to detect drag direction if directionLock is true\n\n      if (dragDirectionLock && _this.currentDirection === null) {\n        _this.currentDirection = getCurrentDirection(offset); // If we've successfully set a direction, notify listener\n\n        if (_this.currentDirection !== null) {\n          onDirectionLock === null || onDirectionLock === void 0 ? void 0 : onDirectionLock(_this.currentDirection);\n        }\n\n        return;\n      } // Update each point with the latest position\n\n\n      _this.updateAxis(\"x\", info.point, offset);\n\n      _this.updateAxis(\"y\", info.point, offset);\n      /**\n       * Ideally we would leave the renderer to fire naturally at the end of\n       * this frame but if the element is about to change layout as the result\n       * of a re-render we want to ensure the browser can read the latest\n       * bounding box to ensure the pointer and element don't fall out of sync.\n       */\n\n\n      _this.visualElement.syncRender();\n      /**\n       * This must fire after the syncRender call as it might trigger a state\n       * change which itself might trigger a layout update.\n       */\n\n\n      onDrag === null || onDrag === void 0 ? void 0 : onDrag(event, info);\n    };\n\n    var onSessionEnd = function (event, info) {\n      return _this.stop(event, info);\n    };\n\n    this.panSession = new PanSession(originEvent, {\n      onSessionStart: onSessionStart,\n      onStart: onStart,\n      onMove: onMove,\n      onSessionEnd: onSessionEnd\n    }, {\n      transformPagePoint: this.visualElement.getTransformPagePoint()\n    });\n  };\n\n  VisualElementDragControls.prototype.stop = function (event, info) {\n    var isDragging = this.isDragging;\n    this.cancel();\n    if (!isDragging) return;\n    var velocity = info.velocity;\n    this.startAnimation(velocity);\n    var onDragEnd = this.getProps().onDragEnd;\n    onDragEnd === null || onDragEnd === void 0 ? void 0 : onDragEnd(event, info);\n  };\n\n  VisualElementDragControls.prototype.cancel = function () {\n    var _a, _b;\n\n    this.isDragging = false;\n\n    if (this.visualElement.projection) {\n      this.visualElement.projection.isAnimationBlocked = false;\n    }\n\n    (_a = this.panSession) === null || _a === void 0 ? void 0 : _a.end();\n    this.panSession = undefined;\n    var dragPropagation = this.getProps().dragPropagation;\n\n    if (!dragPropagation && this.openGlobalLock) {\n      this.openGlobalLock();\n      this.openGlobalLock = null;\n    }\n\n    (_b = this.visualElement.animationState) === null || _b === void 0 ? void 0 : _b.setActive(AnimationType.Drag, false);\n  };\n\n  VisualElementDragControls.prototype.updateAxis = function (axis, _point, offset) {\n    var drag = this.getProps().drag; // If we're not dragging this axis, do an early return.\n\n    if (!offset || !shouldDrag(axis, drag, this.currentDirection)) return;\n    var axisValue = this.getAxisMotionValue(axis);\n    var next = this.originPoint[axis] + offset[axis]; // Apply constraints\n\n    if (this.constraints && this.constraints[axis]) {\n      next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n    }\n\n    axisValue.set(next);\n  };\n\n  VisualElementDragControls.prototype.resolveConstraints = function () {\n    var _this = this;\n\n    var _a = this.getProps(),\n        dragConstraints = _a.dragConstraints,\n        dragElastic = _a.dragElastic;\n\n    var layout = (this.visualElement.projection || {}).layout;\n    var prevConstraints = this.constraints;\n\n    if (dragConstraints && isRefObject(dragConstraints)) {\n      if (!this.constraints) {\n        this.constraints = this.resolveRefConstraints();\n      }\n    } else {\n      if (dragConstraints && layout) {\n        this.constraints = calcRelativeConstraints(layout.actual, dragConstraints);\n      } else {\n        this.constraints = false;\n      }\n    }\n\n    this.elastic = resolveDragElastic(dragElastic);\n    /**\n     * If we're outputting to external MotionValues, we want to rebase the measured constraints\n     * from viewport-relative to component-relative.\n     */\n\n    if (prevConstraints !== this.constraints && layout && this.constraints && !this.hasMutatedConstraints) {\n      eachAxis(function (axis) {\n        if (_this.getAxisMotionValue(axis)) {\n          _this.constraints[axis] = rebaseAxisConstraints(layout.actual[axis], _this.constraints[axis]);\n        }\n      });\n    }\n  };\n\n  VisualElementDragControls.prototype.resolveRefConstraints = function () {\n    var _a = this.getProps(),\n        constraints = _a.dragConstraints,\n        onMeasureDragConstraints = _a.onMeasureDragConstraints;\n\n    if (!constraints || !isRefObject(constraints)) return false;\n    var constraintsElement = constraints.current;\n    invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n    var projection = this.visualElement.projection; // TODO\n\n    if (!projection || !projection.layout) return false;\n    var constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n    var measuredConstraints = calcViewportConstraints(projection.layout.actual, constraintsBox);\n    /**\n     * If there's an onMeasureDragConstraints listener we call it and\n     * if different constraints are returned, set constraints to that\n     */\n\n    if (onMeasureDragConstraints) {\n      var userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n      this.hasMutatedConstraints = !!userConstraints;\n\n      if (userConstraints) {\n        measuredConstraints = convertBoundingBoxToBox(userConstraints);\n      }\n    }\n\n    return measuredConstraints;\n  };\n\n  VisualElementDragControls.prototype.startAnimation = function (velocity) {\n    var _this = this;\n\n    var _a = this.getProps(),\n        drag = _a.drag,\n        dragMomentum = _a.dragMomentum,\n        dragElastic = _a.dragElastic,\n        dragTransition = _a.dragTransition,\n        dragSnapToOrigin = _a.dragSnapToOrigin,\n        onDragTransitionEnd = _a.onDragTransitionEnd;\n\n    var constraints = this.constraints || {};\n    var momentumAnimations = eachAxis(function (axis) {\n      var _a;\n\n      if (!shouldDrag(axis, drag, _this.currentDirection)) {\n        return;\n      }\n\n      var transition = (_a = constraints === null || constraints === void 0 ? void 0 : constraints[axis]) !== null && _a !== void 0 ? _a : {};\n      if (dragSnapToOrigin) transition = {\n        min: 0,\n        max: 0\n      };\n      /**\n       * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n       * of spring animations so we should look into adding a disable spring option to `inertia`.\n       * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n       * using the value of `dragElastic`.\n       */\n\n      var bounceStiffness = dragElastic ? 200 : 1000000;\n      var bounceDamping = dragElastic ? 40 : 10000000;\n\n      var inertia = __assign(__assign({\n        type: \"inertia\",\n        velocity: dragMomentum ? velocity[axis] : 0,\n        bounceStiffness: bounceStiffness,\n        bounceDamping: bounceDamping,\n        timeConstant: 750,\n        restDelta: 1,\n        restSpeed: 10\n      }, dragTransition), transition); // If we're not animating on an externally-provided `MotionValue` we can use the\n      // component's animation controls which will handle interactions with whileHover (etc),\n      // otherwise we just have to animate the `MotionValue` itself.\n\n\n      return _this.startAxisValueAnimation(axis, inertia);\n    }); // Run all animations and then resolve the new drag constraints.\n\n    return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n  };\n\n  VisualElementDragControls.prototype.startAxisValueAnimation = function (axis, transition) {\n    var axisValue = this.getAxisMotionValue(axis);\n    return startAnimation(axis, axisValue, 0, transition);\n  };\n\n  VisualElementDragControls.prototype.stopAnimation = function () {\n    var _this = this;\n\n    eachAxis(function (axis) {\n      return _this.getAxisMotionValue(axis).stop();\n    });\n  };\n  /**\n   * Drag works differently depending on which props are provided.\n   *\n   * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n   * - Otherwise, we apply the delta to the x/y motion values.\n   */\n\n\n  VisualElementDragControls.prototype.getAxisMotionValue = function (axis) {\n    var _a, _b;\n\n    var dragKey = \"_drag\" + axis.toUpperCase();\n    var externalMotionValue = this.visualElement.getProps()[dragKey];\n    return externalMotionValue ? externalMotionValue : this.visualElement.getValue(axis, (_b = (_a = this.visualElement.getProps().initial) === null || _a === void 0 ? void 0 : _a[axis]) !== null && _b !== void 0 ? _b : 0);\n  };\n\n  VisualElementDragControls.prototype.snapToCursor = function (point) {\n    var _this = this;\n\n    eachAxis(function (axis) {\n      var drag = _this.getProps().drag; // If we're not dragging this axis, do an early return.\n\n\n      if (!shouldDrag(axis, drag, _this.currentDirection)) return;\n      var projection = _this.visualElement.projection;\n\n      var axisValue = _this.getAxisMotionValue(axis);\n\n      if (projection && projection.layout) {\n        var _a = projection.layout.actual[axis],\n            min = _a.min,\n            max = _a.max;\n        axisValue.set(point[axis] - mix(min, max, 0.5));\n      }\n    });\n  };\n  /**\n   * When the viewport resizes we want to check if the measured constraints\n   * have changed and, if so, reposition the element within those new constraints\n   * relative to where it was before the resize.\n   */\n\n\n  VisualElementDragControls.prototype.scalePositionWithinConstraints = function () {\n    var _this = this;\n\n    var _a;\n\n    var _b = this.getProps(),\n        drag = _b.drag,\n        dragConstraints = _b.dragConstraints;\n\n    var projection = this.visualElement.projection;\n    if (!isRefObject(dragConstraints) || !projection || !this.constraints) return;\n    /**\n     * Stop current animations as there can be visual glitching if we try to do\n     * this mid-animation\n     */\n\n    this.stopAnimation();\n    /**\n     * Record the relative position of the dragged element relative to the\n     * constraints box and save as a progress value.\n     */\n\n    var boxProgress = {\n      x: 0,\n      y: 0\n    };\n    eachAxis(function (axis) {\n      var axisValue = _this.getAxisMotionValue(axis);\n\n      if (axisValue) {\n        var latest = axisValue.get();\n        boxProgress[axis] = calcOrigin({\n          min: latest,\n          max: latest\n        }, _this.constraints[axis]);\n      }\n    });\n    /**\n     * Update the layout of this element and resolve the latest drag constraints\n     */\n\n    var transformTemplate = this.visualElement.getProps().transformTemplate;\n    this.visualElement.getInstance().style.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n    (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();\n    projection.updateLayout();\n    this.resolveConstraints();\n    /**\n     * For each axis, calculate the current progress of the layout axis\n     * within the new constraints.\n     */\n\n    eachAxis(function (axis) {\n      if (!shouldDrag(axis, drag, null)) return;\n      /**\n       * Calculate a new transform based on the previous box progress\n       */\n\n      var axisValue = _this.getAxisMotionValue(axis);\n\n      var _a = _this.constraints[axis],\n          min = _a.min,\n          max = _a.max;\n      axisValue.set(mix(min, max, boxProgress[axis]));\n    });\n  };\n\n  VisualElementDragControls.prototype.addListeners = function () {\n    var _this = this;\n\n    var _a;\n\n    elementDragControls.set(this.visualElement, this);\n    var element = this.visualElement.getInstance();\n    /**\n     * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n     */\n\n    var stopPointerListener = addPointerEvent(element, \"pointerdown\", function (event) {\n      var _a = _this.getProps(),\n          drag = _a.drag,\n          _b = _a.dragListener,\n          dragListener = _b === void 0 ? true : _b;\n\n      drag && dragListener && _this.start(event);\n    });\n\n    var measureDragConstraints = function () {\n      var dragConstraints = _this.getProps().dragConstraints;\n\n      if (isRefObject(dragConstraints)) {\n        _this.constraints = _this.resolveRefConstraints();\n      }\n    };\n\n    var projection = this.visualElement.projection;\n    var stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n\n    if (projection && !projection.layout) {\n      (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();\n      projection.updateLayout();\n    }\n\n    measureDragConstraints();\n    /**\n     * Attach a window resize listener to scale the draggable target within its defined\n     * constraints as the window resizes.\n     */\n\n    var stopResizeListener = addDomEvent(window, \"resize\", function () {\n      _this.scalePositionWithinConstraints();\n    });\n    /**\n     * If the element's layout changes, calculate the delta and apply that to\n     * the drag gesture's origin point.\n     */\n\n    projection.addEventListener(\"didUpdate\", function (_a) {\n      var delta = _a.delta,\n          hasLayoutChanged = _a.hasLayoutChanged;\n\n      if (_this.isDragging && hasLayoutChanged) {\n        eachAxis(function (axis) {\n          var motionValue = _this.getAxisMotionValue(axis);\n\n          if (!motionValue) return;\n          _this.originPoint[axis] += delta[axis].translate;\n          motionValue.set(motionValue.get() + delta[axis].translate);\n        });\n\n        _this.visualElement.syncRender();\n      }\n    });\n    return function () {\n      stopResizeListener();\n      stopPointerListener();\n      stopMeasureLayoutListener();\n    };\n  };\n\n  VisualElementDragControls.prototype.getProps = function () {\n    var props = this.visualElement.getProps();\n    var _a = props.drag,\n        drag = _a === void 0 ? false : _a,\n        _b = props.dragDirectionLock,\n        dragDirectionLock = _b === void 0 ? false : _b,\n        _c = props.dragPropagation,\n        dragPropagation = _c === void 0 ? false : _c,\n        _d = props.dragConstraints,\n        dragConstraints = _d === void 0 ? false : _d,\n        _e = props.dragElastic,\n        dragElastic = _e === void 0 ? defaultElastic : _e,\n        _f = props.dragMomentum,\n        dragMomentum = _f === void 0 ? true : _f;\n    return __assign(__assign({}, props), {\n      drag: drag,\n      dragDirectionLock: dragDirectionLock,\n      dragPropagation: dragPropagation,\n      dragConstraints: dragConstraints,\n      dragElastic: dragElastic,\n      dragMomentum: dragMomentum\n    });\n  };\n\n  return VisualElementDragControls;\n}();\n\nfunction shouldDrag(direction, drag, currentDirection) {\n  return (drag === true || drag === direction) && (currentDirection === null || currentDirection === direction);\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\n\n\nfunction getCurrentDirection(offset, lockThreshold) {\n  if (lockThreshold === void 0) {\n    lockThreshold = 10;\n  }\n\n  var direction = null;\n\n  if (Math.abs(offset.y) > lockThreshold) {\n    direction = \"y\";\n  } else if (Math.abs(offset.x) > lockThreshold) {\n    direction = \"x\";\n  }\n\n  return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };","map":{"version":3,"sources":["/Users/mac/Documents/develop/ReactJS/netflix_clone/node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs"],"names":["__assign","invariant","PanSession","getGlobalLock","isRefObject","addPointerEvent","applyConstraints","calcRelativeConstraints","resolveDragElastic","rebaseAxisConstraints","calcViewportConstraints","calcOrigin","defaultElastic","AnimationType","createBox","eachAxis","measurePageBox","extractEventInfo","startAnimation","convertBoxToBoundingBox","convertBoundingBoxToBox","addDomEvent","mix","elementDragControls","WeakMap","VisualElementDragControls","visualElement","openGlobalLock","isDragging","currentDirection","originPoint","x","y","constraints","hasMutatedConstraints","elastic","prototype","start","originEvent","_a","_this","_b","_c","snapToCursor","isPresent","onSessionStart","event","stopAnimation","point","onStart","info","getProps","drag","dragPropagation","onDragStart","resolveConstraints","projection","isAnimationBlocked","target","undefined","axis","getAxisMotionValue","get","animationState","setActive","Drag","onMove","dragDirectionLock","onDirectionLock","onDrag","offset","getCurrentDirection","updateAxis","syncRender","onSessionEnd","stop","panSession","transformPagePoint","getTransformPagePoint","cancel","velocity","onDragEnd","end","_point","shouldDrag","axisValue","next","set","dragConstraints","dragElastic","layout","prevConstraints","resolveRefConstraints","actual","onMeasureDragConstraints","constraintsElement","current","constraintsBox","root","measuredConstraints","userConstraints","dragMomentum","dragTransition","dragSnapToOrigin","onDragTransitionEnd","momentumAnimations","transition","min","max","bounceStiffness","bounceDamping","inertia","type","timeConstant","restDelta","restSpeed","startAxisValueAnimation","Promise","all","then","dragKey","toUpperCase","externalMotionValue","getValue","initial","scalePositionWithinConstraints","boxProgress","latest","transformTemplate","getInstance","style","transform","updateScroll","updateLayout","addListeners","element","stopPointerListener","dragListener","measureDragConstraints","stopMeasureLayoutListener","addEventListener","stopResizeListener","window","delta","hasLayoutChanged","motionValue","translate","props","_d","_e","_f","direction","lockThreshold","Math","abs"],"mappings":"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","sourcesContent":["import { __assign } from 'tslib';\nimport { invariant } from 'hey-listen';\nimport { PanSession } from '../PanSession.mjs';\nimport { getGlobalLock } from './utils/lock.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/use-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, rebaseAxisConstraints, calcViewportConstraints, calcOrigin, defaultElastic } from './utils/constraints.mjs';\nimport { AnimationType } from '../../render/utils/types.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { startAnimation } from '../../animation/utils/transitions.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/use-dom-event.mjs';\nimport { mix } from 'popmotion';\n\nvar elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: AnyPointerEvent\nvar VisualElementDragControls = /** @class */ (function () {\n    function VisualElementDragControls(visualElement) {\n        // This is a reference to the global drag gesture lock, ensuring only one component\n        // can \"capture\" the drag of one or both axes.\n        // TODO: Look into moving this into pansession?\n        this.openGlobalLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = { x: 0, y: 0 };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */\n        this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */\n        this.elastic = createBox();\n        this.visualElement = visualElement;\n    }\n    VisualElementDragControls.prototype.start = function (originEvent, _a) {\n        var _this = this;\n        var _b = _a === void 0 ? {} : _a, _c = _b.snapToCursor, snapToCursor = _c === void 0 ? false : _c;\n        /**\n         * Don't start dragging if this component is exiting\n         */\n        if (this.visualElement.isPresent === false)\n            return;\n        var onSessionStart = function (event) {\n            // Stop any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            _this.stopAnimation();\n            if (snapToCursor) {\n                _this.snapToCursor(extractEventInfo(event, \"page\").point);\n            }\n        };\n        var onStart = function (event, info) {\n            var _a;\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            var _b = _this.getProps(), drag = _b.drag, dragPropagation = _b.dragPropagation, onDragStart = _b.onDragStart;\n            if (drag && !dragPropagation) {\n                if (_this.openGlobalLock)\n                    _this.openGlobalLock();\n                _this.openGlobalLock = getGlobalLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!_this.openGlobalLock)\n                    return;\n            }\n            _this.isDragging = true;\n            _this.currentDirection = null;\n            _this.resolveConstraints();\n            if (_this.visualElement.projection) {\n                _this.visualElement.projection.isAnimationBlocked = true;\n                _this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */\n            eachAxis(function (axis) {\n                _this.originPoint[axis] = _this.getAxisMotionValue(axis).get();\n            });\n            // Fire onDragStart event\n            onDragStart === null || onDragStart === void 0 ? void 0 : onDragStart(event, info);\n            (_a = _this.visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Drag, true);\n        };\n        var onMove = function (event, info) {\n            // latestPointerEvent = event\n            var _a = _this.getProps(), dragPropagation = _a.dragPropagation, dragDirectionLock = _a.dragDirectionLock, onDirectionLock = _a.onDirectionLock, onDrag = _a.onDrag;\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !_this.openGlobalLock)\n                return;\n            var offset = info.offset;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && _this.currentDirection === null) {\n                _this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (_this.currentDirection !== null) {\n                    onDirectionLock === null || onDirectionLock === void 0 ? void 0 : onDirectionLock(_this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            _this.updateAxis(\"x\", info.point, offset);\n            _this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */\n            _this.visualElement.syncRender();\n            /**\n             * This must fire after the syncRender call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */\n            onDrag === null || onDrag === void 0 ? void 0 : onDrag(event, info);\n        };\n        var onSessionEnd = function (event, info) {\n            return _this.stop(event, info);\n        };\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart: onSessionStart,\n            onStart: onStart,\n            onMove: onMove,\n            onSessionEnd: onSessionEnd,\n        }, { transformPagePoint: this.visualElement.getTransformPagePoint() });\n    };\n    VisualElementDragControls.prototype.stop = function (event, info) {\n        var isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging)\n            return;\n        var velocity = info.velocity;\n        this.startAnimation(velocity);\n        var onDragEnd = this.getProps().onDragEnd;\n        onDragEnd === null || onDragEnd === void 0 ? void 0 : onDragEnd(event, info);\n    };\n    VisualElementDragControls.prototype.cancel = function () {\n        var _a, _b;\n        this.isDragging = false;\n        if (this.visualElement.projection) {\n            this.visualElement.projection.isAnimationBlocked = false;\n        }\n        (_a = this.panSession) === null || _a === void 0 ? void 0 : _a.end();\n        this.panSession = undefined;\n        var dragPropagation = this.getProps().dragPropagation;\n        if (!dragPropagation && this.openGlobalLock) {\n            this.openGlobalLock();\n            this.openGlobalLock = null;\n        }\n        (_b = this.visualElement.animationState) === null || _b === void 0 ? void 0 : _b.setActive(AnimationType.Drag, false);\n    };\n    VisualElementDragControls.prototype.updateAxis = function (axis, _point, offset) {\n        var drag = this.getProps().drag;\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\n            return;\n        var axisValue = this.getAxisMotionValue(axis);\n        var next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    };\n    VisualElementDragControls.prototype.resolveConstraints = function () {\n        var _this = this;\n        var _a = this.getProps(), dragConstraints = _a.dragConstraints, dragElastic = _a.dragElastic;\n        var layout = (this.visualElement.projection || {}).layout;\n        var prevConstraints = this.constraints;\n        if (dragConstraints && isRefObject(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        }\n        else {\n            if (dragConstraints && layout) {\n                this.constraints = calcRelativeConstraints(layout.actual, dragConstraints);\n            }\n            else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (prevConstraints !== this.constraints &&\n            layout &&\n            this.constraints &&\n            !this.hasMutatedConstraints) {\n            eachAxis(function (axis) {\n                if (_this.getAxisMotionValue(axis)) {\n                    _this.constraints[axis] = rebaseAxisConstraints(layout.actual[axis], _this.constraints[axis]);\n                }\n            });\n        }\n    };\n    VisualElementDragControls.prototype.resolveRefConstraints = function () {\n        var _a = this.getProps(), constraints = _a.dragConstraints, onMeasureDragConstraints = _a.onMeasureDragConstraints;\n        if (!constraints || !isRefObject(constraints))\n            return false;\n        var constraintsElement = constraints.current;\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        var projection = this.visualElement.projection;\n        // TODO\n        if (!projection || !projection.layout)\n            return false;\n        var constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        var measuredConstraints = calcViewportConstraints(projection.layout.actual, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            var userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    };\n    VisualElementDragControls.prototype.startAnimation = function (velocity) {\n        var _this = this;\n        var _a = this.getProps(), drag = _a.drag, dragMomentum = _a.dragMomentum, dragElastic = _a.dragElastic, dragTransition = _a.dragTransition, dragSnapToOrigin = _a.dragSnapToOrigin, onDragTransitionEnd = _a.onDragTransitionEnd;\n        var constraints = this.constraints || {};\n        var momentumAnimations = eachAxis(function (axis) {\n            var _a;\n            if (!shouldDrag(axis, drag, _this.currentDirection)) {\n                return;\n            }\n            var transition = (_a = constraints === null || constraints === void 0 ? void 0 : constraints[axis]) !== null && _a !== void 0 ? _a : {};\n            if (dragSnapToOrigin)\n                transition = { min: 0, max: 0 };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            var bounceStiffness = dragElastic ? 200 : 1000000;\n            var bounceDamping = dragElastic ? 40 : 10000000;\n            var inertia = __assign(__assign({ type: \"inertia\", velocity: dragMomentum ? velocity[axis] : 0, bounceStiffness: bounceStiffness, bounceDamping: bounceDamping, timeConstant: 750, restDelta: 1, restSpeed: 10 }, dragTransition), transition);\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return _this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    };\n    VisualElementDragControls.prototype.startAxisValueAnimation = function (axis, transition) {\n        var axisValue = this.getAxisMotionValue(axis);\n        return startAnimation(axis, axisValue, 0, transition);\n    };\n    VisualElementDragControls.prototype.stopAnimation = function () {\n        var _this = this;\n        eachAxis(function (axis) { return _this.getAxisMotionValue(axis).stop(); });\n    };\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    VisualElementDragControls.prototype.getAxisMotionValue = function (axis) {\n        var _a, _b;\n        var dragKey = \"_drag\" + axis.toUpperCase();\n        var externalMotionValue = this.visualElement.getProps()[dragKey];\n        return externalMotionValue\n            ? externalMotionValue\n            : this.visualElement.getValue(axis, (_b = (_a = this.visualElement.getProps().initial) === null || _a === void 0 ? void 0 : _a[axis]) !== null && _b !== void 0 ? _b : 0);\n    };\n    VisualElementDragControls.prototype.snapToCursor = function (point) {\n        var _this = this;\n        eachAxis(function (axis) {\n            var drag = _this.getProps().drag;\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, _this.currentDirection))\n                return;\n            var projection = _this.visualElement.projection;\n            var axisValue = _this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                var _a = projection.layout.actual[axis], min = _a.min, max = _a.max;\n                axisValue.set(point[axis] - mix(min, max, 0.5));\n            }\n        });\n    };\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n    VisualElementDragControls.prototype.scalePositionWithinConstraints = function () {\n        var _this = this;\n        var _a;\n        var _b = this.getProps(), drag = _b.drag, dragConstraints = _b.dragConstraints;\n        var projection = this.visualElement.projection;\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints)\n            return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */\n        this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */\n        var boxProgress = { x: 0, y: 0 };\n        eachAxis(function (axis) {\n            var axisValue = _this.getAxisMotionValue(axis);\n            if (axisValue) {\n                var latest = axisValue.get();\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, _this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */\n        var transformTemplate = this.visualElement.getProps().transformTemplate;\n        this.visualElement.getInstance().style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */\n        eachAxis(function (axis) {\n            if (!shouldDrag(axis, drag, null))\n                return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */\n            var axisValue = _this.getAxisMotionValue(axis);\n            var _a = _this.constraints[axis], min = _a.min, max = _a.max;\n            axisValue.set(mix(min, max, boxProgress[axis]));\n        });\n    };\n    VisualElementDragControls.prototype.addListeners = function () {\n        var _this = this;\n        var _a;\n        elementDragControls.set(this.visualElement, this);\n        var element = this.visualElement.getInstance();\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        var stopPointerListener = addPointerEvent(element, \"pointerdown\", function (event) {\n            var _a = _this.getProps(), drag = _a.drag, _b = _a.dragListener, dragListener = _b === void 0 ? true : _b;\n            drag && dragListener && _this.start(event);\n        });\n        var measureDragConstraints = function () {\n            var dragConstraints = _this.getProps().dragConstraints;\n            if (isRefObject(dragConstraints)) {\n                _this.constraints = _this.resolveRefConstraints();\n            }\n        };\n        var projection = this.visualElement.projection;\n        var stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();\n            projection.updateLayout();\n        }\n        measureDragConstraints();\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        var stopResizeListener = addDomEvent(window, \"resize\", function () {\n            _this.scalePositionWithinConstraints();\n        });\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */\n        projection.addEventListener(\"didUpdate\", (function (_a) {\n            var delta = _a.delta, hasLayoutChanged = _a.hasLayoutChanged;\n            if (_this.isDragging && hasLayoutChanged) {\n                eachAxis(function (axis) {\n                    var motionValue = _this.getAxisMotionValue(axis);\n                    if (!motionValue)\n                        return;\n                    _this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                _this.visualElement.syncRender();\n            }\n        }));\n        return function () {\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n        };\n    };\n    VisualElementDragControls.prototype.getProps = function () {\n        var props = this.visualElement.getProps();\n        var _a = props.drag, drag = _a === void 0 ? false : _a, _b = props.dragDirectionLock, dragDirectionLock = _b === void 0 ? false : _b, _c = props.dragPropagation, dragPropagation = _c === void 0 ? false : _c, _d = props.dragConstraints, dragConstraints = _d === void 0 ? false : _d, _e = props.dragElastic, dragElastic = _e === void 0 ? defaultElastic : _e, _f = props.dragMomentum, dragMomentum = _f === void 0 ? true : _f;\n        return __assign(__assign({}, props), { drag: drag, dragDirectionLock: dragDirectionLock, dragPropagation: dragPropagation, dragConstraints: dragConstraints, dragElastic: dragElastic, dragMomentum: dragMomentum });\n    };\n    return VisualElementDragControls;\n}());\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold) {\n    if (lockThreshold === void 0) { lockThreshold = 10; }\n    var direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };\n"]},"metadata":{},"sourceType":"module"}