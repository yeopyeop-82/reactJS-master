{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/develop/ReactJS/trello_clone/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport { useRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\nimport { toDoState } from \"./atoms\";\nimport Board from \"./components/Board\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled.div`\n  display: flex;\n  width: 100vw;\n  margin: 0 auto;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n`;\n_c = Wrapper;\nconst Boards = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: flex-start;\n  width: 100%;\n  gap: 10px;\n`;\n_c2 = Boards;\n\nfunction App() {\n  _s();\n\n  const [toDos, setToDos] = useRecoilState(toDoState);\n\n  const onDragEnd = info => {\n    console.log(info);\n    const {\n      destination,\n      draggableId,\n      source\n    } = info;\n    if (!destination) return;\n\n    if ((destination === null || destination === void 0 ? void 0 : destination.droppableId) === source.droppableId) {\n      // same board movement.\n      setToDos(allBoards => {\n        const boardCopy = [...allBoards[source.droppableId]];\n        boardCopy.splice(source.index, 1);\n        boardCopy.splice(destination === null || destination === void 0 ? void 0 : destination.index, 0, draggableId);\n        return { ...allBoards,\n          [source.droppableId]: boardCopy\n        };\n      });\n    }\n\n    if (destination.droppableId !== source.droppableId) {\n      setToDos(allBoards => {\n        const sourceBoard = [...allBoards[source.droppableId]];\n        const destBoard = [...allBoards[destination.droppableId]];\n        sourceBoard.splice(source.index, 1);\n        destBoard.splice(destination.index, 0, draggableId);\n        return { ...allBoards,\n          [source.droppableId]: sourceBoard,\n          [destination.droppableId]: destBoard\n        };\n      });\n    } // setToDos((oldToDos) => {\n    //   const copyToDos = [...oldToDos];\n    //   // 1) delete item on source.index\n    //   console.log(\"Delete item on \", source.index);\n    //   console.log(copyToDos);\n    //   copyToDos.splice(source.index, 1);\n    //   console.log(\"Delete item \");\n    //   // 2) Put back the item on the destiantion.index\n    //   console.log(\"put back \", draggableId, \"on \", destination.index);\n    //   copyToDos.splice(destination?.index, 0, draggableId);\n    //   console.log(copyToDos);\n    //   return copyToDos;\n    // });\n\n  };\n\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: onDragEnd,\n    children: /*#__PURE__*/_jsxDEV(Wrapper, {\n      children: /*#__PURE__*/_jsxDEV(Boards, {\n        children: Object.keys(toDos).map(boardId => /*#__PURE__*/_jsxDEV(Board, {\n          boardId: boardId,\n          toDos: toDos[boardId]\n        }, boardId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"5a67h5XNEBDPty+W6+XWtUnHNYw=\", false, function () {\n  return [useRecoilState];\n});\n\n_c3 = App;\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"Boards\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"sources":["/Users/mac/Documents/develop/ReactJS/trello_clone/src/App.tsx"],"names":["DragDropContext","useRecoilState","styled","toDoState","Board","Wrapper","div","Boards","App","toDos","setToDos","onDragEnd","info","console","log","destination","draggableId","source","droppableId","allBoards","boardCopy","splice","index","sourceBoard","destBoard","Object","keys","map","boardId"],"mappings":"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","sourcesContent":["import { DragDropContext, DropResult } from \"react-beautiful-dnd\";\nimport { useRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\nimport { toDoState } from \"./atoms\";\nimport Board from \"./components/Board\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  width: 100vw;\n  margin: 0 auto;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n`;\n\nconst Boards = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: flex-start;\n  width: 100%;\n  gap: 10px;\n`;\n\nfunction App() {\n  const [toDos, setToDos] = useRecoilState(toDoState);\n\n  const onDragEnd = (info: DropResult) => {\n    console.log(info);\n    const { destination, draggableId, source } = info;\n    if (!destination) return;\n    if (destination?.droppableId === source.droppableId) {\n      // same board movement.\n      setToDos((allBoards) => {\n        const boardCopy = [...allBoards[source.droppableId]];\n        boardCopy.splice(source.index, 1);\n        boardCopy.splice(destination?.index, 0, draggableId);\n        return {\n          ...allBoards,\n          [source.droppableId]: boardCopy,\n        };\n      });\n    }\n    if (destination.droppableId !== source.droppableId) {\n      setToDos((allBoards) => {\n        const sourceBoard = [...allBoards[source.droppableId]];\n        const destBoard = [...allBoards[destination.droppableId]];\n        sourceBoard.splice(source.index, 1);\n        destBoard.splice(destination.index, 0, draggableId);\n        return {\n          ...allBoards,\n          [source.droppableId]: sourceBoard,\n          [destination.droppableId]: destBoard,\n        };\n      });\n    }\n\n    // setToDos((oldToDos) => {\n    //   const copyToDos = [...oldToDos];\n    //   // 1) delete item on source.index\n    //   console.log(\"Delete item on \", source.index);\n    //   console.log(copyToDos);\n    //   copyToDos.splice(source.index, 1);\n    //   console.log(\"Delete item \");\n    //   // 2) Put back the item on the destiantion.index\n    //   console.log(\"put back \", draggableId, \"on \", destination.index);\n    //   copyToDos.splice(destination?.index, 0, draggableId);\n    //   console.log(copyToDos);\n    //   return copyToDos;\n    // });\n  };\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <Wrapper>\n        <Boards>\n          {Object.keys(toDos).map((boardId) => (\n            <Board boardId={boardId} key={boardId} toDos={toDos[boardId]} />\n          ))}\n        </Boards>\n      </Wrapper>\n    </DragDropContext>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}